name: Test, lint and format

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        version: ["pypy3.10", "3.11", "3.12", "3.13"]
    if: ${{ !startsWith(github.ref, 'refs/tags/v') && !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.version }}

      - name: Windows build
        if: startsWith(matrix.os, 'windows')
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: Build macos/linux
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name : Run tests
        run: |
          python -m pytest ..

  lint-and-format:
    if: ${{ !startsWith(github.ref, 'refs/tags/v') && !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: "ubuntu-latest"
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pylint
        run: |
          pylint --fail-under=9 uzac vm

      - name: Format python code with ruff
        run: python -m ruff format

      - name: Check for formatting changes
        id: git-check
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "modified=true" >> $GITHUB_ENV
          else
            echo "modified=false" >> $GITHUB_ENV
          fi

      - name: Commit formating changes
        if: ${{ success() && env.modified == 'true'}}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add uzac test vm
          git commit -m "formatting: automated code formating"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
